service: woahlife
org: seancsnyder

frameworkVersion: '3'
configValidationMode: warn

plugins:
  - serverless-plugin-aws-alerts
  - serverless-python-requirements
  - serverless-domain-manager

custom:
  pythonRequirements:
    dockerizePip: true
  alerts:
    topics:
      alarm:
        topic: ${self:service}-${self:provider.stage}-alarm
        notifications:
          - protocol: email
            endpoint: noreply@snyderitis.com
    dashboards: true
    definitions:
      functionErrors:
        period: 3600
    alarms:
      - functionErrors
      - functionInvocations
  rootDomain: woahlife.com
  customDomain:
    domainName: api-${self:provider.stage}.${self:custom.rootDomain}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  versionFunctions: true
  deploymentBucket:
    name: snyderitis-serverless-deployments
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - !Sub arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*
            - !Sub arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/api-gateway/${self:service}-${self:provider.stage}*
            - !Sub arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/apigateway/welcome*
            - !Sub arn:aws:logs:${aws:region}:${aws:accountId}:log-group:API-Gateway-Execution-Logs*
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - !GetAtt DynamoTable.Arn
        - Effect: Allow
          Action:
            - kms:Encrypt
            - kms:Decrypt
          Resource:
            - !GetAtt EncryptionKey.Arn
  logRetentionInDays: 30
  tracing:
    apiGateway: true
    lambda: true
  stackTags:
    app: ${self:service}
  apiGateway:
    shouldStartNameWithService: true
    apiKeys:
      - iosApp:
        - ${self:service}-iosApp-${self:provider.stage}-20220226
    usagePlan:
      - iosApp:
          quota:
            limit: 250
            offset: 0
            period: DAY
          throttle:
            burstLimit: 20
            rateLimit: 10

package:
  patterns:
    - '!node_modules/**'
    - '!.env/**'

functions:
  CreateEntry:
    handler: handler.create_entry
    name: ${self:service}-${self:provider.stage}-create-journal-entry
    description: Create and process an incoming journal entry
    memorySize: 128
    timeout: 30
    layers:
      - arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:14
    alarms:
      - functionErrors
      - functionInvocations
    events:
      - http:
          path: create
          method: post
          private: true
    environment:
      KMS_KEY_ARN: !GetAtt EncryptionKey.Arn
      DYNAMODB_TABLE: !Ref DynamoTable

  GetEntry:
    handler: handler.get_entry
    name: ${self:service}-${self:provider.stage}-get-journal-entry
    description: Get an existing entry by date
    memorySize: 128
    timeout: 30
    layers:
      - arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:14
    alarms:
      - functionErrors
      - functionInvocations
    events:
      - http:
          path: entry/{date}
          method: get
          private: true
          request:
            parameters:
              paths:
                date: true
    environment:
      ALGOLIA_APP_ID: ${ssm:/${sls:stage}/woahlife/algoliaAppId}
      ALGOLIA_APP_KEY: ${ssm:/${sls:stage}/woahlife/algoliaAppKey}
      ALGOLIA_INDEX_NAME: entries

  SyncEntriesToSearchIndex:
    handler: handler.sync_entries_to_search_index
    name: ${self:service}-${self:provider.stage}-sync-search-index-journal-entry
    description: Sync the dynamodb item update to the search index
    memorySize: 128
    timeout: 60
    layers:
      - arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:14
    alarms:
      - functionErrors
      - functionInvocations
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt DynamoTable.StreamArn
          bisectBatchOnFunctionError: true
          maximumRetryAttempts: 3
    environment:
      KMS_KEY_ARN: !GetAtt EncryptionKey.Arn
      ALGOLIA_APP_ID: ${ssm:/${sls:stage}/woahlife/algoliaAppId}
      ALGOLIA_APP_KEY: ${ssm:/${sls:stage}/woahlife/algoliaAppKey}
      ALGOLIA_INDEX_NAME: entries
      DYNAMODB_TABLE: !Ref DynamoTable

  SearchEntries:
    handler: handler.search_entries
    name: ${self:service}-${self:provider.stage}-search-journal-entries
    description: Search through journal entries
    memorySize: 128
    timeout: 30
    layers:
      - arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:14
    alarms:
      - functionErrors
      - functionInvocations
    events:
      - http:
          path: search
          method: get
          private: true
          request:
            parameters:
              querystrings:
                query: true
    environment:
      ALGOLIA_APP_ID: ${ssm:/${sls:stage}/woahlife/algoliaAppId}
      ALGOLIA_APP_KEY: ${ssm:/${sls:stage}/woahlife/algoliaAppKey}
      ALGOLIA_INDEX_NAME: entries

  EncryptUnencryptedEntries:
    handler: handler.encrypt_unencrypted_entries
    name: ${self:service}-${self:provider.stage}-encrypt-unencrypted-entries
    description: Search through journal entries and encrypt anything that wasn't already encrypted
    memorySize: 128
    timeout: 600
    layers:
      - arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:14
    alarms:
      - functionErrors
      - functionInvocations
    environment:
      KMS_KEY_ARN: !GetAtt EncryptionKey.Arn
      DYNAMODB_TABLE: !Ref DynamoTable

resources:
  Resources:
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-entries
        AttributeDefinitions:
          - AttributeName: date
            AttributeType: N
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: date
            KeyType: HASH
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
          SSEType: KMS
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        Tags:
          - Key: APP
            Value: ${self:provider.stackTags.app}

    EncryptionKey:
      Type: AWS::KMS::Key
      Properties:
        Description: "Encryption key for journal entries"
        Enabled: true
        EnableKeyRotation: true
        KeyPolicy: {
          "Statement": [
            {
              "Sid": "Enable root to manage the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${aws:accountId}:root"
              },
              "Action": [
                "kms:*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Lambda to use key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${aws:accountId}:role/woahlife-${self:provider.stage}-${aws:region}-lambdaRole"
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt"
              ],
              "Resource": "*"
            }
          ]
        }
        KeySpec: SYMMETRIC_DEFAULT
        KeyUsage: ENCRYPT_DECRYPT
        MultiRegion: false
        PendingWindowInDays: 30
        Tags:
          - Key: APP
            Value: ${self:provider.stackTags.app}

    EncryptionKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/${self:service}/${self:provider.stage}/journalEncryption
        TargetKeyId: !Ref EncryptionKey

