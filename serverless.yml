service: woahlife
app: woahlife
org: seancsnyder
plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-aws-alerts
custom:
  alerts:
    topics:
      alarm:
        topic: ${self:app}-${self:provider.stage}-cloudwatch-alarms
        notifications:
          - protocol: email
            endpoint: noreply@snyderitis.com
    definitions:
      functionInvocations:
        namespace: 'AWS/Lambda'
        metric: Invocations
        threshold: 10
        statistic: Sum
        period: 86400
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: missing
      functionErrors:
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching
    alarms:
      - functionInvocations
      - functionErrors

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'prod'}
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: 
        - !Sub "arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/lambda/${self:app}-${self:provider.stage}-*"
        - !Sub "arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/api-gateway/woahlife-prod*"
        - !Sub "arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/apigateway/welcome*"
        - !Sub "arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:API-Gateway-Execution-Logs*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: 
        - !Sub "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/woahlife_entries"
    - Effect: Allow
      Action: 
        - secretsmanager:GetSecretValue
      Resource: 
        - !Sub "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:prod/woahlife/mailgunApiKey*"
  environment: 
    TO_EMAIL_ADDRESS: sean@snyderitis.com
    MAILGUN_API_SSM_REGION: !Ref AWS::Region
    MAILGUN_API_SSM_KEY: prod/woahlife/mailgunApiKey
  logRetentionInDays: 30 

functions:
  RequestEntry:
    handler: handler.requestEntry
    name: ${self:app}-${self:provider.stage}-request-new-journal-entry
    description: Send a request for a journal entry
    memorySize: 128
    timeout: 15
    events:
      - http:
          path: request
          method: get
  ReceiveEntry:
    handler: handler.receiveEntry
    name: ${self:app}-${self:provider.stage}-receive-incoming-journal-entry
    description: Receive and process the incoming journal entry
    memorySize: 128
    timeout: 15
    events:
      - http:
          path: receive
          method: post
  BrowseEntries:
    handler: handler.browseEntries
    name: ${self:app}-${self:provider.stage}-browse-existing-journal-entries
    description: Browse the existing entries by year
    memorySize: 256
    timeout: 60
    events:
      - http:
          path: browse
          method: post
  CleanupEntries:
    handler: handler.cleanupEntries
    name: ${self:app}-${self:provider.stage}-cleanup-existing-journal-entries
    description: Cleanup the existing entries
    memorySize: 256
    timeout: 60          

resources:
  Resources:
    RequestingJournalCron:
      Type: AWS::Events::Rule
      Properties: 
        Description: Trigger the lambda to send the email requesting a journal entry
        Name: ${self:provider.stage}-woahlife-request-journal-entryEventsRuleSchedule1
        ScheduleExpression: cron(0 2,14 * * ? *)
        State: ENABLED
        Targets: 
          - Arn: !GetAtt RequestEntryLambdaFunction.Arn
            Id: TargetFunction1
    PermissionForEventsToInvokeLambda: 
      Type: AWS::Lambda::Permission
      Properties: 
        FunctionName: 
          Ref: RequestEntryLambdaFunction
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt RequestingJournalCron.Arn