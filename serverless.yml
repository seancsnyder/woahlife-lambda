service: woahlife
app: woahlife
org: seancsnyder
plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-aws-alerts
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true
  alerts:
    topics:
      alarm:
        topic: ${self:app}-${self:provider.stage}-alarm
        notifications:
          - protocol: email
            endpoint: noreply@snyderitis.com
    definitions:
      functionInvocations:
        namespace: AWS/Lambda
        metric: Invocations
        threshold: 10
        statistic: Sum
        period: 86400
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching
      functionErrors:
        namespace: AWS/Lambda
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching
    alarms:
      - functionInvocations
      - functionErrors

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'prod'}
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: 
        - !Sub arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/lambda/${self:app}-${self:provider.stage}-*
        - !Sub arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/api-gateway/${self:app}-${self:provider.stage}*
        - !Sub arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/apigateway/welcome*
        - !Sub arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:API-Gateway-Execution-Logs*
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: 
        - !GetAtt DynamoTable.Arn
    - Effect: Allow
      Action:
        - es:ESHttpDelete
        - es:ESHttpGet
        - es:ESHttpHead
        - es:ESHttpPost
        - es:ESHttpPut
      Resource: !GetAtt ElasticSearchInstance.Arn

  environment: 
    TO_EMAIL_ADDRESS: sean@snyderitis.com
    MAILGUN_API_KEY: ${ssm:/prod/woahlife/mailgunApiKey~true}
    ELASTICSEARCH_HOST: !GetAtt ElasticSearchInstance.DomainEndpoint
    ELASTICSEARCH_JOURNALENTRY_INDEX: woahlife-entries
    DYANMODB_TABLE: !Ref DynamoTable
  logRetentionInDays: 30 
  tracing:
    apiGateway: true
    lambda: true 
  stackTags:
    APP: woahlife

functions:
  RequestEntry:
    handler: handler.requestEntry
    name: ${self:app}-${self:provider.stage}-request-new-journal-entry
    description: Send a request for a journal entry
    memorySize: 128
    timeout: 60
    events:
      - http:
          path: request
          method: get
      - schedule:
          name: ${self:provider.stage}-woahlife-request-journal-entry-schedule
          description: Trigger the lambda to send the email requesting a journal entry
          rate: cron(0 2,14 * * ? *)
          enabled: true
  ReceiveEntry:
    handler: handler.receiveEntry
    name: ${self:app}-${self:provider.stage}-receive-incoming-journal-entry
    description: Receive and process the incoming journal entry
    memorySize: 128
    timeout: 60
    events:
      - http:
          path: receive
          method: post
  BrowseEntries:
    handler: handler.browseEntries
    name: ${self:app}-${self:provider.stage}-browse-existing-journal-entries
    description: Browse the existing entries by year
    memorySize: 256
    timeout: 60
    events:
      - http:
          path: browse
          method: post
  CleanupEntries:
    handler: handler.cleanupEntries
    name: ${self:app}-${self:provider.stage}-cleanup-existing-journal-entries
    description: Cleanup the existing entries
    memorySize: 256
    timeout: 300
  RebuildElasticSearch:
    handler: handler.rebuildElasticSearch
    name: ${self:app}-${self:provider.stage}-rebuild-elasticsearch-journal-entries
    description: Rebuild the elasticsearch indexes
    memorySize: 256
    timeout: 300
  SyncElasticSearch:
    handler: handler.syncElasticSearch
    name: ${self:app}-${self:provider.stage}-sync-elasticsearch-journal-entry
    description: Sync the dynamodb item update to the elasticsearch index
    memorySize: 128
    timeout: 60 
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt DynamoTable.StreamArn
  Search:
    handler: handler.search
    name: ${self:app}-${self:provider.stage}-search-journal-entries
    description: Search through journal entries
    memorySize: 256
    timeout: 60    

resources:
  Resources:
    ElasticSearchInstance:
      Type: AWS::Elasticsearch::Domain
      Properties:
        DomainName: ${self:app}-${self:provider.stage}-search
        EBSOptions:
          EBSEnabled: true
          VolumeType: gp2
          VolumeSize: 10
        ElasticsearchClusterConfig:
          InstanceType: t2.small.elasticsearch
          InstanceCount: 1
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: 
                  - arn:aws:iam::#{AWS::AccountId}:root
                  - !Sub arn:aws:iam::#{AWS::AccountId}:role/${self:app}-${self:provider.stage}-#{AWS::Region}-lambdaRole
              Action: "es:*"
              Resource: !Sub arn:aws:es:#{AWS::Region}:#{AWS::AccountId}:domain/${self:app}-${self:provider.stage}-search/*
            - Effect: Allow
              Principal:
                AWS: arn:aws:iam::#{AWS::AccountId}:root
              Action: "es:*"
              Resource: !Sub arn:aws:es:#{AWS::Region}:#{AWS::AccountId}:domain/${self:app}-${self:provider.stage}-search/*
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: "es:*"
              Resource: !Sub arn:aws:es:#{AWS::Region}:#{AWS::AccountId}:domain/${self:app}-${self:provider.stage}-search/*
              Condition:
                IpAddress:
                  aws:SourceIp: 23.241.193.18
        ElasticsearchVersion: 7.1
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:app}-${self:provider.stage}-entries
        AttributeDefinitions: 
          - AttributeName: date
            AttributeType: N
        BillingMode: PAY_PER_REQUEST
        KeySchema: 
          - AttributeName: date
            KeyType: HASH
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification: 
          SSEEnabled: true
          SSEType: KMS
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        Tags: 
          - Key: APP
            Value: ${self:provider.stackTags.APP}